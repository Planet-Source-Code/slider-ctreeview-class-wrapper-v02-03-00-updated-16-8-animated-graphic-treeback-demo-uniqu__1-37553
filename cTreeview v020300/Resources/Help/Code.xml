<?xml version="1.0" encoding="iso-8859-1" ?>
<?xml-stylesheet type="text/xsl" href="D:\PROGRA~1\MICROS~3\VB98\sample.xsl" ?>
<Project>
<Name>vbTree</Name>
<FileName>vbTree.vbp</FileName>
<PathFileName>C:\cTreeview v020300\Source - DLL\vbTree.vbp</PathFileName>
<BuildFileName>vbTree.dll</BuildFileName>
<BuildPathFileName>C:\cTreeview v020300\RunTime\vbTree.dll</BuildPathFileName>
<CompatibleOleServer></CompatibleOleServer>
<Description>cTreeView Wrapper Class</Description>
<HelpContextID>0</HelpContextID>
<HelpFile></HelpFile>
<StartMode>1</StartMode>
<Type>ActiveX Dll</Type>
<References>
<Reference>
<Name>VBA</Name>
<FileName>msvbvm60.dll</FileName>
<PathFileName>d:\winnt\system32\msvbvm60.dll</PathFileName>
<Description>Visual Basic For Applications</Description>
<BuiltIn>True</BuiltIn>
<Guid>{000204EF-0000-0000-C000-000000000046}</Guid>
<Major>6</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>VBRUN</Name>
<FileName>msvbvm60.dll\3</FileName>
<PathFileName>d:\winnt\system32\msvbvm60.dll\3</PathFileName>
<Description>Visual Basic runtime objects and procedures</Description>
<BuiltIn>True</BuiltIn>
<Guid>{EA544A21-C82D-11D1-A3E4-00A0C90AEA82}</Guid>
<Major>6</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>VB</Name>
<FileName>vb6.olb</FileName>
<PathFileName>d:\program files\microsoft visual studio\vb98\vb6.olb</PathFileName>
<Description>Visual Basic objects and procedures</Description>
<BuiltIn>True</BuiltIn>
<Guid>{FCFB3D2E-A0FA-1068-A738-08002B3371B5}</Guid>
<Major>6</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>stdole</Name>
<FileName>stdole2.tlb</FileName>
<PathFileName>d:\winnt\system32\stdole2.tlb</PathFileName>
<Description>OLE Automation</Description>
<BuiltIn>False</BuiltIn>
<Guid>{00020430-0000-0000-C000-000000000046}</Guid>
<Major>2</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>ADODB</Name>
<FileName>msado25.tlb</FileName>
<PathFileName>d:\program files\common files\system\ado\msado25.tlb</PathFileName>
<Description>Microsoft ActiveX Data Objects 2.5 Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{00000205-0000-0010-8000-00AA006D2EA4}</Guid>
<Major>2</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>MSXML2</Name>
<FileName>msxml3.dll</FileName>
<PathFileName>d:\winnt\system32\msxml3.dll</PathFileName>
<Description>Microsoft XML, v3.0</Description>
<BuiltIn>False</BuiltIn>
<Guid>{F5078F18-C551-11D3-89B9-0000F81FE221}</Guid>
<Major>3</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>MSComctlLib</Name>
<FileName>mscomctl.ocx</FileName>
<PathFileName>d:\winnt\system32\mscomctl.ocx</PathFileName>
<Description>Microsoft Windows Common Controls 6.0 (SP4)</Description>
<BuiltIn>False</BuiltIn>
<Guid>{D220BFD7-65DF-4A88-95D9-751BB02F5203}</Guid>
<Major>2</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
</References>
<Files>
<File>
<Name>cTreeView</Name>
<FileName>cTreeView.cls</FileName>
<PathFileName>C:\cTreeview v020300\Source - DLL\cTreeView.cls</PathFileName>
<Type>ClassModule</Type>
<Description></Description>
<HelpContextID>0</HelpContextID>
<Properties>
<Property>
<Name>Name</Name>
<Value>cTreeView</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>5</Value>
</Property>
<Property>
<Name>Persistable</Name>
<Value>0</Value>
</Property>
<Property>
<Name>DataBindingBehavior</Name>
<Value>0</Value>
</Property>
<Property>
<Name>DataSourceBehavior</Name>
<Value>0</Value>
</Property>
<Property>
<Name>MTSTransactionMode</Name>
<Value>0</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>677</CountOfDeclarationLines>
<CountOfLines>5360</CountOfLines>
<Interfaces>
<Interface>iMultiSelect</Interface>
<Interface>iDisable</Interface>
</Interfaces>
<Events>
<Event>
<Name>Selected</Name>
<Declaration>Public Event Selected(Node As MSComctlLib.Node)</Declaration>
</Event>
<Event>
<Name>Hover</Name>
<Declaration>Public Event Hover(Node As MSComctlLib.Node)</Declaration>
</Event>
<Event>
<Name>ContextMenu</Name>
<Declaration>Public Event ContextMenu(Node As MSComctlLib.Node, x As Single, y As Single)</Declaration>
</Event>
<Event>
<Name>StartDrag</Name>
<Declaration>Public Event StartDrag(SourceNode As MSComctlLib.Node)</Declaration>
</Event>
<Event>
<Name>Dragging</Name>
<Declaration>Public Event Dragging(SourceNode As MSComctlLib.Node, TargetParent As MSComctlLib.Node)</Declaration>
</Event>
<Event>
<Name>Dropped</Name>
<Declaration>Public Event Dropped(SourceNode As MSComctlLib.Node, TargetParent As MSComctlLib.Node)</Declaration>
</Event>
<Event>
<Name>CopyNode</Name>
<Declaration>Public Event CopyNode(DestNode As MSComctlLib.Node, SrcNode As MSComctlLib.Node, Cancel As Boolean)</Declaration>
</Event>
<Event>
<Name>AfterLabelEdit</Name>
<Declaration>Public Event AfterLabelEdit(Cancel As Integer, NewString As String)</Declaration>
</Event>
<Event>
<Name>BeforeLabelEdit</Name>
<Declaration>Public Event BeforeLabelEdit(Cancel As Integer)</Declaration>
</Event>
<Event>
<Name>Click</Name>
<Declaration>Public Event Click()</Declaration>
</Event>
<Event>
<Name>Collapse</Name>
<Declaration>Public Event Collapse(ByVal Node As MSComctlLib.Node)</Declaration>
</Event>
<Event>
<Name>DblClick</Name>
<Declaration>Public Event DblClick()</Declaration>
</Event>
<Event>
<Name>Expand</Name>
<Declaration>Public Event Expand(ByVal Node As MSComctlLib.Node)</Declaration>
</Event>
<Event>
<Name>KeyDown</Name>
<Declaration>Public Event KeyDown(KeyCode, Shift)</Declaration>
</Event>
<Event>
<Name>KeyPress</Name>
<Declaration>Public Event KeyPress(KeyAscii)</Declaration>
</Event>
<Event>
<Name>KeyUp</Name>
<Declaration>Public Event KeyUp(KeyCode, Shift)</Declaration>
</Event>
<Event>
<Name>MouseDown</Name>
<Declaration>Public Event MouseDown(Button As Integer, Shift As Integer, ByVal x As Single, ByVal y As Single, Cancel As Boolean)</Declaration>
</Event>
<Event>
<Name>MouseMove</Name>
<Declaration>Public Event MouseMove(Button As Integer, Shift As Integer, ByVal x As Single, ByVal y As Single)</Declaration>
</Event>
<Event>
<Name>MouseUp</Name>
<Declaration>Public Event MouseUp(Button As Integer, Shift As Integer, ByVal x As Single, ByVal y As Single)</Declaration>
</Event>
<Event>
<Name>NodeClick</Name>
<Declaration>Public Event NodeClick(ByVal Node As MSComctlLib.Node)</Declaration>
</Event>
<Event>
<Name>SelChange</Name>
<Declaration>Public Event SelChange()</Declaration>
</Event>
<Event>
<Name>StateChange</Name>
<Declaration>Public Event StateChange()</Declaration>
</Event>
</Events>
<Procedures>
<Procedure>
<Name>MsgResponse</Name>
<Scope>Friend</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine> Subclassing                                                               &apos;@@ v02.02.00</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Friend Property Let MsgResponse(ByVal RHS As EMsgResponse)</Declaration>
<Parameters>
<Parameter>
<Name>RHS</Name>
<Type>EMsgResponse</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>MsgResponse</Name>
<Scope>Friend</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Friend Property Get MsgResponse() As EMsgResponse</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>WindowProc</Name>
<Scope>Friend</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>125</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Friend Function WindowProc(ByVal hwnd As Long, ByVal iMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long</Declaration>
<Parameters>
<Parameter>
<Name>hwnd</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>iMsg</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>wParam</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>lParam</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_AfterLabelEdit</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine> TreeView: Events</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Sub oTree_AfterLabelEdit(Cancel As Integer, NewString As String)</Declaration>
<Parameters>
<Parameter>
<Name>Cancel</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>NewString</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_BeforeLabelEdit</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_BeforeLabelEdit(Cancel As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>Cancel</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_Click()</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_Collapse</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_Collapse(ByVal Node As MSComctlLib.Node)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_DblClick</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_DblClick()</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_DragDrop</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_DragDrop(Source As Control, x As Single, y As Single)</Declaration>
<Parameters>
<Parameter>
<Name>Source</Name>
<Type>Control</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>x</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>y</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_DragOver</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_DragOver(Source As Control, x As Single, y As Single, State As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>Source</Name>
<Type>Control</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>x</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>y</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>State</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_Expand</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_Expand(ByVal Node As MSComctlLib.Node)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_GotFocus</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_GotFocus()</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_KeyDown</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>138</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_KeyDown(KeyCode As Integer, Shift As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>KeyCode</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Shift</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_KeyPress</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_KeyPress(KeyAscii As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>KeyAscii</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_KeyUp</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>63</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_KeyUp(KeyCode As Integer, Shift As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>KeyCode</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Shift</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_LostFocus</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_LostFocus()</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_MouseDown</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>48</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_MouseDown(Button As Integer, Shift As Integer, x As Single, y As Single)</Declaration>
<Parameters>
<Parameter>
<Name>Button</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Shift</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>x</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>y</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_MouseMove</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>65</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_MouseMove(Button As Integer, Shift As Integer, x As Single, y As Single)</Declaration>
<Parameters>
<Parameter>
<Name>Button</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Shift</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>x</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>y</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_MouseUp</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>60</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_MouseUp(Button As Integer, Shift As Integer, x As Single, y As Single)</Declaration>
<Parameters>
<Parameter>
<Name>Button</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Shift</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>x</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>y</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_NodeCheck</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_NodeCheck(ByVal Node As MSComctlLib.Node)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_NodeClick</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>35</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_NodeClick(ByVal Node As MSComctlLib.Node)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_OLECompleteDrag</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_OLECompleteDrag(Effect As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Effect</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_OLEDragDrop</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_OLEDragDrop(Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, Shift As Integer, x As Single, y As Single)</Declaration>
<Parameters>
<Parameter>
<Name>Data</Name>
<Type>MSComctlLib.DataObject</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Effect</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Button</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Shift</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>x</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>y</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_OLEDragOver</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_OLEDragOver(Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, Shift As Integer, x As Single, y As Single, State As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>Data</Name>
<Type>MSComctlLib.DataObject</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Effect</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Button</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Shift</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>x</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>y</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>State</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_OLEGiveFeedback</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_OLEGiveFeedback(Effect As Long, DefaultCursors As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Effect</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>DefaultCursors</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_OLESetData</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_OLESetData(Data As MSComctlLib.DataObject, DataFormat As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>Data</Name>
<Type>MSComctlLib.DataObject</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>DataFormat</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_OLEStartDrag</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_OLEStartDrag(Data As MSComctlLib.DataObject, AllowedEffects As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Data</Name>
<Type>MSComctlLib.DataObject</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>AllowedEffects</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>oTree_Validate</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub oTree_Validate(Cancel As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Cancel</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>Class_Initialize</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>35</CountOfLines>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine> Internal Class Subroutines</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Sub Class_Initialize()</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>Class_Terminate</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>## release control</CommentLine>
</CommentLines>
<Declaration>Private Sub Class_Terminate()</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>moDragExpand_Tick</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine> Timers: Events</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Sub moDragExpand_Tick()</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>moDragScroll_Tick</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>57</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub moDragScroll_Tick()</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>Appearance</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine> Public Properties</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Property Get Appearance() As eAppearance</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>Appearance</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let Appearance(ByVal New_Appearance As eAppearance)</Declaration>
<Parameters>
<Parameter>
<Name>New_Appearance</Name>
<Type>eAppearance</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>BackColor</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get BackColor() As OLE_COLOR</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>BackColor</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let BackColor(ByVal New_Color As OLE_COLOR)</Declaration>
<Parameters>
<Parameter>
<Name>New_Color</Name>
<Type>OLE_COLOR</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>BackFileName</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get BackFileName() As String</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>BackFileName</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let BackFileName(ByVal New_FileName As String)</Declaration>
<Parameters>
<Parameter>
<Name>New_FileName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>BackMode</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get BackMode() As eBackMode</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>BackMode</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let BackMode(ByVal New_Mode As eBackMode)</Declaration>
<Parameters>
<Parameter>
<Name>New_Mode</Name>
<Type>eBackMode</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>BackPicture</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get BackPicture() As StdPicture</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>BackPicture</Name>
<Scope>Public</Scope>
<Type>PropertySet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Set BackPicture(ByVal New_Pic As StdPicture)</Declaration>
<Parameters>
<Parameter>
<Name>New_Pic</Name>
<Type>StdPicture</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>ChildParentKeys</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>39</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get ChildParentKeys(Optional ByVal oNode As MSComctlLib.Node) As String()</Declaration>
<Parameters>
<Parameter>
<Name>oNode</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>ContextMenuMode</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get ContextMenuMode() As eContextMenuMode</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>ContextMenuMode</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let ContextMenuMode(ByVal Mode As eContextMenuMode)</Declaration>
<Parameters>
<Parameter>
<Name>Mode</Name>
<Type>eContextMenuMode</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>Ctrl</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>## Default Object</CommentLine>
</CommentLines>
<Declaration>Public Property Get Ctrl() As Object</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>CutIcon</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get CutIcon(Optional ByVal Node As MSComctlLib.Node) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>CutIcon</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let CutIcon(Optional ByVal Node As MSComctlLib.Node, ByVal SetState As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>SetState</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>DragEnabled</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get DragEnabled() As Boolean</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>DragEnabled</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let DragEnabled(ByVal Enabled As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Enabled</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>DragExpandTime</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get DragExpandTime() As Long</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>DragExpandTime</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let DragExpandTime(ByVal New_DragExpandTime As Long)</Declaration>
<Parameters>
<Parameter>
<Name>New_DragExpandTime</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>DragScrollTime</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get DragScrollTime() As Long</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>DragScrollTime</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let DragScrollTime(ByVal New_DragScrollTime As Long)</Declaration>
<Parameters>
<Parameter>
<Name>New_DragScrollTime</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>EditLabelMaxLength</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get EditLabelMaxLength() As Long</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>EditLabelMaxLength</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let EditLabelMaxLength(ByVal NewLength As Long)</Declaration>
<Parameters>
<Parameter>
<Name>NewLength</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>Enabled</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get Enabled() As Boolean</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>Enabled</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let Enabled(ByVal bState As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>bState</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>FirstVisibleNode</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine>## Returns the first viewable node</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Property Get FirstVisibleNode() As MSComctlLib.Node</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>FirstVisibleNode</Name>
<Scope>Public</Scope>
<Type>PropertySet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine>## Set the first visible Node of a TreeView control</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Property Set FirstVisibleNode(ByVal Node As MSComctlLib.Node)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>FullKeyPath</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine>## Returns a node&apos;s path of keys</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Property Get FullKeyPath(Optional ByVal oNode As MSComctlLib.Node) As String</Declaration>
<Parameters>
<Parameter>
<Name>oNode</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>LastVisibleNode</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>38</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine>## Returns the last visible node</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Property Get LastVisibleNode() As MSComctlLib.Node</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>Locked</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get Locked() As Boolean</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>Locked</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>28</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let Locked(ByVal bState As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>bState</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NodeNestingLevel</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine>## Returns the nesting level of a TreeView&apos;s Node object</CommentLine>
<CommentLine>   (returns zero for root nodes.)</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Property Get NodeNestingLevel(ByVal Node As MSComctlLib.Node) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>OverlayIcon</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get OverlayIcon(Optional ByVal Node As MSComctlLib.Node) As eItemOverlayIndices</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>OverlayIcon</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let OverlayIcon(Optional ByVal Node As MSComctlLib.Node, Index As eItemOverlayIndices)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Index</Name>
<Type>eItemOverlayIndices</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>ParentNodeText</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine>## Returns the parent text</CommentLine>
<CommentLine>   NOTE: If a Node has no parent then VB raises an error.</CommentLine>
<CommentLine>         This is a much safer Node.Parent.Text routine.</CommentLine>
</CommentLines>
<Declaration>Public Property Get ParentNodeText(ByVal Node As MSComctlLib.Node) As String</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>ToolTips</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get ToolTips() As Boolean</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>ToolTips</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let ToolTips(ByVal NewState As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>NewState</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>ClearTreeView</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine> Public subroutines and functions</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub ClearTreeView()</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>CollapseAll</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine>## Collapse all nodes</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub CollapseAll()</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>CollapseChildNodes</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00 Old code was buggy - replaced with new efficient routine!</CommentLine>
</CommentLines>
<Declaration>Public Sub CollapseChildNodes(ByVal Node As MSComctlLib.Node)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>ExpandAll</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine>## Expand all nodes</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub ExpandAll()</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>ExpandChildNodes</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00 Old code was buggy - replaced with new efficient routine!</CommentLine>
</CommentLines>
<Declaration>Public Sub ExpandChildNodes(ByVal Node As MSComctlLib.Node)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>HitTestEx</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>79</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Public Function HitTestEx(ByVal x As Single, ByVal y As Single, Optional ByRef Part As eHitTestEx, Optional ByVal Button As Integer, Optional ByVal Capture As Boolean = False, Optional ByVal TestRow As Boolean = True) As MSComctlLib.Node</Declaration>
<Parameters>
<Parameter>
<Name>x</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>y</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Part</Name>
<Type>eHitTestEx</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Button</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Capture</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>TestRow</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>HookCtrl</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>84</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub HookCtrl(ByRef Ctrl As Object, Optional OpMode As eOpMode = [Single Select])</Declaration>
<Parameters>
<Parameter>
<Name>Ctrl</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>OpMode</Name>
<Type>eOpMode</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>[Single</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>IsChildNode</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function IsChildNode(ByVal TestNode As MSComctlLib.Node, ByVal ParentNode As MSComctlLib.Node, Optional ByVal NodeDepth As eNodeDepth = [First Branch]) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>TestNode</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ParentNode</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>NodeDepth</Name>
<Type>eNodeDepth</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>[First</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>IsNodeTextUnique</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Public Function IsNodeTextUnique(ByVal Node As MSComctlLib.Node, ByVal Text As String, Optional ByVal CompareMethod As VbCompareMethod = vbTextCompare) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Text</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CompareMethod</Name>
<Type>VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>IsParentNode</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>33</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine>## Checks if one node is the parent of another.</CommentLine>
<CommentLine>   This is a recursive routine that steps down through</CommentLine>
<CommentLine>   the branches of the parent node.</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function IsParentNode(ByVal ChildNode As MSComctlLib.Node, ByVal ParentNode As MSComctlLib.Node) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>ChildNode</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ParentNode</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>IsPathExpanded</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine>## Checks (recursively) if a Node&apos;s path is expanded (back to the Root-level node</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function IsPathExpanded(ByVal Node As MSComctlLib.Node) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>IsRootNode</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine>## Check if selected node is a root node.</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function IsRootNode(ByVal Node As MSComctlLib.Node) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>IsScrollbarVisible</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.01.00 Added new method</CommentLine>
</CommentLines>
<Declaration>Public Function IsScrollbarVisible(WhichScroll As eIsScrollbarVisible) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>WhichScroll</Name>
<Type>eIsScrollbarVisible</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>Load</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function Load(ByVal Filename As String, Optional ByVal FileMode As eFileMode) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Filename</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FileMode</Name>
<Type>eFileMode</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NodeAbsoluteIndex</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Public Function NodeAbsoluteIndex(ByVal Node As MSComctlLib.Node) As Long</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NodeAbsolutePosition</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Public Function NodeAbsolutePosition(ByVal Node As MSComctlLib.Node, Optional ByVal VisibleOnly As Boolean = True) As Long</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>VisibleOnly</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NodeAdd</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>16</CountOfDeclarationLines>
<CountOfLines>55</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function NodeAdd(Optional ByVal vRelative As Variant, Optional ByVal eRelationship As MSComctlLib.TreeRelationshipConstants, Optional ByVal sKey As String, Optional ByVal sText As String, Optional ByVal vImage As Variant, Optional ByVal vSelectedImage As Variant, Optional ByVal vTag As Variant, Optional ByVal bBold As Boolean = False, Optional ByVal bChecked As Boolean = False, Optional ByVal bEnsureVisible As Boolean = False, Optional ByVal bExpanded As Boolean = True, Optional ByVal bSelected As Boolean = False, Optional ByVal bSorted As Boolean = False, Optional ByVal lForeColor As OLE_COLOR, Optional ByVal lBackColor As OLE_COLOR, Optional ByVal vExpandedImage As Variant) As MSComctlLib.Node</Declaration>
<Parameters>
<Parameter>
<Name>vRelative</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>eRelationship</Name>
<Type>MSComctlLib.TreeRelationshipConstants</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>sKey</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>sText</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>vImage</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>vSelectedImage</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>vTag</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>bBold</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>bChecked</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>bEnsureVisible</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>bExpanded</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
<Parameter>
<Name>bSelected</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>bSorted</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>lForeColor</Name>
<Type>OLE_COLOR</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>lBackColor</Name>
<Type>OLE_COLOR</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>vExpandedImage</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NodeCoord</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>41</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Public Sub NodeCoord(ByRef Left As Single, ByRef Top As Single, ByRef Width As Single, ByRef Height As Single, Optional HostType As eNodeCoords = [By Node])</Declaration>
<Parameters>
<Parameter>
<Name>Left</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Top</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Width</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Height</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>HostType</Name>
<Type>eNodeCoords</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>[By</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NodeCopy</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>58</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function NodeCopy(ByVal DestNode As MSComctlLib.Node, ByVal SrcNode As MSComctlLib.Node, Optional ByVal IncludeChildren As Boolean = True) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>DestNode</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>SrcNode</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>IncludeChildren</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NodeCountChildren</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Public Function NodeCountChildren(ByVal Node As MSComctlLib.Node, Optional ByVal VisibleOnly As Boolean = False, Optional ByVal ForceExpanded As Boolean = False) As Long</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>VisibleOnly</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>ForceExpanded</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NodeDelete</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>28</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function NodeDelete(ByVal Node As MSComctlLib.Node, Optional ByVal bSelect As Boolean = True, Optional ByVal bIncludeChilden = True) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>bSelect</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
<Parameter>
<Name>bIncludeChilden</Name>
<Type></Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NodeExist</Name>
<Scope></Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Function NodeExist(ByVal Key As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Key</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NodeFind</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>30</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function NodeFind(ByRef oResultNode As MSComctlLib.Node, ByVal NodeText As String, Optional ByVal NodeKey As String, Optional ByVal bSelect As Boolean = True) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>oResultNode</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>NodeText</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>NodeKey</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>bSelect</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NodeFindEx</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>49</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Public Function NodeFindEx(ByVal Text As String, Optional ByVal Mode As eNodeFindEx = [Find Node Text], Optional ByVal CaseSensitive As Boolean = False) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>Text</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Mode</Name>
<Type>eNodeFindEx</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>[Find</DefaultValue>
</Parameter>
<Parameter>
<Name>CaseSensitive</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NodeFindEx2</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>113</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Public Function NodeFindEx2(ByVal LikeText As String, Optional ByVal StartNode As MSComctlLib.Node, Optional ByVal FindMode As eNodeFindEx = [Find Node Text], Optional ByVal CompareMethod As VbCompareMethod = vbTextCompare) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>LikeText</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>StartNode</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FindMode</Name>
<Type>eNodeFindEx</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>[Find</DefaultValue>
</Parameter>
<Parameter>
<Name>CompareMethod</Name>
<Type>VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NodeFindObjectInTag</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>32</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Public Function NodeFindObjectInTag(ByVal FindObject As Object, Optional ByVal StartNode As MSComctlLib.Node, Optional ByVal OnlyFirstOccurance As Boolean = True) As Object</Declaration>
<Parameters>
<Parameter>
<Name>FindObject</Name>
<Type>Object</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>StartNode</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>OnlyFirstOccurance</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NodeMove</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>127</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function NodeMove(ByVal TargetNode As MSComctlLib.Node, ByRef SourceNode As MSComctlLib.Node, Optional ByVal bSelect As Boolean = True, Optional ByVal eRelationship As TreeRelationshipConstants = tvwChild) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>TargetNode</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>SourceNode</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>bSelect</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
<Parameter>
<Name>eRelationship</Name>
<Type>TreeRelationshipConstants</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>tvwChild</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NodePosition</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Public Function NodePosition(ByVal Node As MSComctlLib.Node) As Long</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NodeRename</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function NodeRename(ByVal Node As MSComctlLib.Node, ByVal NewNodeText As String, Optional ByVal bSelect As Boolean = True) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>NewNodeText</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>bSelect</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NodeUniqueText</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>35</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Public Function NodeUniqueText(ByVal Node As MSComctlLib.Node, ByVal NewText As String, Optional ByVal CompareMethod As VbCompareMethod = vbTextCompare, Optional ByVal PrefixNumberMode As eNodeUniquePrefixNumberMode = Numbers, Optional ByVal Prefix As String = csDefaultNodePrefix) As String</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>NewText</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CompareMethod</Name>
<Type>VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
<Parameter>
<Name>PrefixNumberMode</Name>
<Type>eNodeUniquePrefixNumberMode</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>Numbers</DefaultValue>
</Parameter>
<Parameter>
<Name>Prefix</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>csDefaultNodePrefix</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>Redraw</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub Redraw(ByVal Enabled As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Enabled</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>Save</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function Save(ByVal Filename As String, Optional ByVal FileMode As eFileMode) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Filename</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FileMode</Name>
<Type>eFileMode</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>ScrollView</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>41</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine>## Scrolls the treview using code</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub ScrollView(ByVal Dir As eCodeScrollView)</Declaration>
<Parameters>
<Parameter>
<Name>Dir</Name>
<Type>eCodeScrollView</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>SetFocusNode</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub SetFocusNode(ByVal KeyIndex As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>KeyIndex</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>SetOverlayImage</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub SetOverlayImage(ByVal Imaglelisthandle As OLE_HANDLE, ByVal ImageListIndex As Long, ByVal ShareOverlay As eItemOverlayIndices)</Declaration>
<Parameters>
<Parameter>
<Name>Imaglelisthandle</Name>
<Type>OLE_HANDLE</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ImageListIndex</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ShareOverlay</Name>
<Type>eItemOverlayIndices</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>SubNodesSorted</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Public Sub SubNodesSorted(Optional ByVal Node As MSComctlLib.Node, Optional ByVal State As Boolean = True)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>State</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>UnHookCtrl</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>28</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub UnHookCtrl()</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>iDisable_BackColor</Name>
<Scope>Private</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine> Disable Node: Public properties, subroutines and functions    &apos;@@ v02.02.00</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Property Let iDisable_BackColor(ByVal RHS As stdole.OLE_COLOR)</Declaration>
<Parameters>
<Parameter>
<Name>RHS</Name>
<Type>stdole.OLE_COLOR</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iDisable_AllowSelect</Name>
<Scope>Private</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Get iDisable_AllowSelect() As Boolean</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>iDisable_AllowSelect</Name>
<Scope>Private</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Let iDisable_AllowSelect(ByVal RHS As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>RHS</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iDisable_BackColor</Name>
<Scope>Private</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Get iDisable_BackColor() As stdole.OLE_COLOR</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>iDisable_Bold</Name>
<Scope>Private</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Let iDisable_Bold(ByVal RHS As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>RHS</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iDisable_Bold</Name>
<Scope>Private</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Get iDisable_Bold() As Boolean</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>iDisable_ForeColor</Name>
<Scope>Private</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Let iDisable_ForeColor(ByVal RHS As stdole.OLE_COLOR)</Declaration>
<Parameters>
<Parameter>
<Name>RHS</Name>
<Type>stdole.OLE_COLOR</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iDisable_ForeColor</Name>
<Scope>Private</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Get iDisable_ForeColor() As stdole.OLE_COLOR</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>iDisable_FocusNode</Name>
<Scope>Private</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Get iDisable_FocusNode() As MSComctlLib.INode</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>iDisable_DisabledNode</Name>
<Scope>Private</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Get iDisable_DisabledNode(ByVal Index As Long) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>Index</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iDisable_SelectMode</Name>
<Scope>Private</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Get iDisable_SelectMode() As eDisableAdjustSelectMode</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>iDisable_SelectMode</Name>
<Scope>Private</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Let iDisable_SelectMode(ByVal RHS As eDisableAdjustSelectMode)</Declaration>
<Parameters>
<Parameter>
<Name>RHS</Name>
<Type>eDisableAdjustSelectMode</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iDisable_DisableAllNodes</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub iDisable_DisableAllNodes(Optional Node As MSComctlLib.INode, Optional ByVal State As Boolean = True)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.INode</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>State</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iDisable_DisableMultiSelect</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub iDisable_DisableMultiSelect(Optional ByVal State As Boolean = True)</Declaration>
<Parameters>
<Parameter>
<Name>State</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iDisable_DisableNode</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub iDisable_DisableNode(Node As MSComctlLib.INode, Optional ByVal State As Boolean = True)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.INode</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>State</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iDisable_ToggleDisabled</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub iDisable_ToggleDisabled(Optional Node As MSComctlLib.INode)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.INode</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iDisable_ToggleNodeState</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>44</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub iDisable_ToggleNodeState(Optional Node As MSComctlLib.INode, Optional ByVal Children As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.INode</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Children</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iDisable_NewEnum</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>## Pass the enumeration pointers to the Implementation class. Implementation class</CommentLine>
<CommentLine>   will then expose the enumeration to the calling routine. Who said that the</CommentLine>
<CommentLine>   Interface class had no functionality...</CommentLine>
</CommentLines>
<Declaration>Private Function iDisable_NewEnum() As stdole.IUnknown</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>iMultiSelect_NoClearOnSpaceClick</Name>
<Scope>Private</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine> MultiNode Selection: Public properties, subroutines and functions</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Property Let iMultiSelect_NoClearOnSpaceClick(ByVal RHS As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>RHS</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iMultiSelect_NoClearOnSpaceClick</Name>
<Scope>Private</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Get iMultiSelect_NoClearOnSpaceClick() As Boolean</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>iMultiSelect_NoDefaultSel</Name>
<Scope>Private</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Let iMultiSelect_NoDefaultSel(ByVal RHS As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>RHS</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iMultiSelect_NoDefaultSel</Name>
<Scope>Private</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Get iMultiSelect_NoDefaultSel() As Boolean</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>iMultiSelect_SelBackColor</Name>
<Scope>Private</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>30</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Let iMultiSelect_SelBackColor(ByVal RHS As stdole.OLE_COLOR)</Declaration>
<Parameters>
<Parameter>
<Name>RHS</Name>
<Type>stdole.OLE_COLOR</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iMultiSelect_SelBackColor</Name>
<Scope>Private</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Get iMultiSelect_SelBackColor() As stdole.OLE_COLOR</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>iMultiSelect_SelBold</Name>
<Scope>Private</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>30</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Let iMultiSelect_SelBold(ByVal RHS As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>RHS</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iMultiSelect_SelBold</Name>
<Scope>Private</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Get iMultiSelect_SelBold() As Boolean</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>iMultiSelect_SelForeColor</Name>
<Scope>Private</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>30</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Let iMultiSelect_SelForeColor(ByVal RHS As stdole.OLE_COLOR)</Declaration>
<Parameters>
<Parameter>
<Name>RHS</Name>
<Type>stdole.OLE_COLOR</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iMultiSelect_SelForeColor</Name>
<Scope>Private</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Get iMultiSelect_SelForeColor() As stdole.OLE_COLOR</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>iMultiSelect_FocusNode</Name>
<Scope>Private</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Let iMultiSelect_FocusNode(ByVal RHS As MSComctlLib.INode)</Declaration>
<Parameters>
<Parameter>
<Name>RHS</Name>
<Type>MSComctlLib.INode</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iMultiSelect_FocusNode</Name>
<Scope>Private</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Get iMultiSelect_FocusNode() As MSComctlLib.INode</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>iMultiSelect_SelectedNode</Name>
<Scope>Private</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Get iMultiSelect_SelectedNode(ByVal Index As Long) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>Index</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iMultiSelect_ClearSelection</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub iMultiSelect_ClearSelection(Optional ByRef Node As MSComctlLib.INode)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.INode</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iMultiSelect_SelectAllNodes</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub iMultiSelect_SelectAllNodes(Optional ByRef Node As MSComctlLib.INode)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.INode</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iMultiSelect_SelectNode</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub iMultiSelect_SelectNode(ByRef Node As MSComctlLib.INode, ByVal Selected As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.INode</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Selected</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iMultiSelect_ToggleNode</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>55</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub iMultiSelect_ToggleNode(Optional ByRef Node As MSComctlLib.INode, Optional ByVal Children As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.INode</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Children</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iMultiSelect_ToggleSelection</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub iMultiSelect_ToggleSelection(Optional ByRef Node As MSComctlLib.INode)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.INode</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>iMultiSelect_NewEnum</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function iMultiSelect_NewEnum() As stdole.IUnknown</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>pDisableAllNodes</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>51</CountOfLines>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine> Disable Node: Private subroutines and functions                               &apos;@@ v02.02.00</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Sub pDisableAllNodes(Optional ByVal Node As MSComctlLib.Node, Optional ByVal State As Boolean = True)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>State</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pDisableNode</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub pDisableNode(ByRef Node As MSComctlLib.Node, ByVal State As Boolean, Optional ByVal ChildState As Boolean = False)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>State</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ChildState</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pSetNodeState</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub pSetNodeState(ByRef Node As MSComctlLib.Node, ByVal State As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>State</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pAdjustSelection</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>38</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Private Sub pAdjustSelection(ByVal Node As MSComctlLib.Node, Optional ByVal LookForward As Boolean = True)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>LookForward</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pToggleDisabled</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>38</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub pToggleDisabled(Optional ByVal Node As MSComctlLib.Node)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pClearSelection</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>58</CountOfLines>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine> MultiNode Selection: Private subroutines and functions</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Sub pClearSelection(Optional ByVal Node As MSComctlLib.Node)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pSelectAllNodes</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>50</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub pSelectAllNodes(Optional ByRef Node As MSComctlLib.Node)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pSelectNode</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub pSelectNode(ByRef Node As MSComctlLib.Node, ByVal Selected As Boolean, Optional ByVal ChildSelect As Boolean = False)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Selected</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ChildSelect</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pSetFocusNode</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>redraw False</CommentLine>
</CommentLines>
<Declaration>Private Sub pSetFocusNode(Node As MSComctlLib.Node)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pSetNodeSelect</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub pSetNodeSelect(ByRef Node As MSComctlLib.Node, ByVal State As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>State</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pToggleSelection</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>55</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub pToggleSelection(Optional ByRef Node As MSComctlLib.Node)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pDoDrag</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>48</CountOfLines>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine> Drag&apos;n&apos;Drop: Private subroutines and functions</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Sub pDoDrag()</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>pInitXML</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine> General: Private BIN/XML Save/Load subroutines and functions</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Sub pInitXML(ByRef oRs As ADODB.Recordset)</Declaration>
<Parameters>
<Parameter>
<Name>oRs</Name>
<Type>ADODB.Recordset</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pLoadBIN</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>70</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function pLoadBIN(ByVal Filename As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Filename</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pLoadXML</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>87</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function pLoadXML(ByVal Filename As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Filename</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pSaveBIN</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>50</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function pSaveBIN(ByVal Filename As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Filename</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pSaveXML</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>53</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function pSaveXML(ByVal Filename As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Filename</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pNodeFindTextCompareBinary</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine> Node Find: Private Methods                                            &apos;@@ v02.02.00</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Sub pNodeFindTextCompareBinary(ByVal Node As MSComctlLib.Node, ByVal FindText As String, ByVal Nodes As Collection)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FindText</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Nodes</Name>
<Type>Collection</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pNodeFindKeyCompareBinary</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub pNodeFindKeyCompareBinary(ByVal Node As MSComctlLib.Node, ByVal FindText As String, ByVal Nodes As Collection)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FindText</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Nodes</Name>
<Type>Collection</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pNodeFindBothCompareBinary</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub pNodeFindBothCompareBinary(ByVal Node As MSComctlLib.Node, ByVal FindText As String, ByVal Nodes As Collection)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FindText</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Nodes</Name>
<Type>Collection</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pNodeFindTextCompareText</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub pNodeFindTextCompareText(ByVal Node As MSComctlLib.Node, ByVal FindText As String, ByVal Nodes As Collection)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FindText</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Nodes</Name>
<Type>Collection</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pNodeFindKeyCompareText</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub pNodeFindKeyCompareText(ByVal Node As MSComctlLib.Node, ByVal FindText As String, ByVal Nodes As Collection)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FindText</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Nodes</Name>
<Type>Collection</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pNodeFindBothCompareText</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub pNodeFindBothCompareText(ByVal Node As MSComctlLib.Node, ByVal FindText As String, ByVal Nodes As Collection)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FindText</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Nodes</Name>
<Type>Collection</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pNodeFindObjectInTag</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub pNodeFindObjectInTag(ByVal Node As MSComctlLib.Node, ByVal FindObject As Object, ByVal Nodes As Object, ByVal OnlyFirstOccurance As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FindObject</Name>
<Type>Object</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Nodes</Name>
<Type>Object</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>OnlyFirstOccurance</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pClearUpDC</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine> General: Private subroutines and functions</CommentLine>
<CommentLine></CommentLine>
<CommentLine>@@ v02.03.00</CommentLine>
</CommentLines>
<Declaration>Private Sub pClearUpDC(ByVal lIndex As Long)</Declaration>
<Parameters>
<Parameter>
<Name>lIndex</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pEnsureMemDC</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.03.00</CommentLine>
</CommentLines>
<Declaration>Private Sub pEnsureMemDC(ByVal hDCC As Long, ByVal lIndex As Long, ByVal lWidth As Long, ByVal lHeight As Long, Optional BackColor As OLE_COLOR = vbWindowBackground)</Declaration>
<Parameters>
<Parameter>
<Name>hDCC</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>lIndex</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>lWidth</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>lHeight</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>BackColor</Name>
<Type>OLE_COLOR</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbWindowBackground</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pGetFirstNode</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function pGetFirstNode() As MSComctlLib.Node</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>pGetItemFromNode</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>47</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine>## If successful, returns the treeview item handle represented by</CommentLine>
<CommentLine>   the specified Node, returns 0 otherwise.</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Function pGetItemFromNode(ByVal Node As MSComctlLib.Node) As Long</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pGetLastNode</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Private Function pGetLastNode(Optional ByVal Node As MSComctlLib.Node) As MSComctlLib.Node</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pGetNextEnabled</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>69</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Private Function pGetNextEnabled(ByVal Node As MSComctlLib.Node) As MSComctlLib.Node</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pGetNodeHandle</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function pGetNodeHandle(Optional ByVal Node As MSComctlLib.Node) As Long</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pGetNodeSiblingPos</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine>## Returns the one-base position of the specified node</CommentLine>
<CommentLine>   with respect to it&apos;s sibling order.</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Function pGetNodeSiblingPos(ByVal Node As MSComctlLib.Node) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pGetPrevEnabled</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>46</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Private Function pGetPrevEnabled(ByVal Node As MSComctlLib.Node) As MSComctlLib.Node</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pGetPrevEnabledParent</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>33</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Private Function pGetPrevEnabledParent(ByVal Node As MSComctlLib.Node) As MSComctlLib.Node</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pGetSelectedNodeCoords</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>37</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.01.00</CommentLine>
</CommentLines>
<Declaration>Private Function pGetSelectedNodeCoords() As RECT</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>pIsWindowScrollable</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>35</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine>## Returns a set of bit flags indicating whether the specified</CommentLine>
<CommentLine>   window can be scrolled in any given direction.</CommentLine>
</CommentLines>
<Declaration>Private Function pIsWindowScrollable(hwnd As Long) As ScrollDirectionFlags</Declaration>
<Parameters>
<Parameter>
<Name>hwnd</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pLoWord</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function pLoWord(ByVal Value As Long) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>Value</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pHiWord</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function pHiWord(ByVal Value As Long) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>Value</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pNodeAbsolutePosition</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Private Function pNodeAbsolutePosition(Node As MSComctlLib.Node, ByVal VisibleOnly As Boolean) As Long</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>VisibleOnly</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pNodeCountChildren</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Private Function pNodeCountChildren(ByVal Node As MSComctlLib.Node, ByVal VisibleOnly As Boolean, ByVal ForceExpanded As Boolean) As Long</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>VisibleOnly</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ForceExpanded</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pNodeSwap</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>36</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function pNodeSwap(ByVal ParentNode As MSComctlLib.Node, ByVal ChildNode As MSComctlLib.Node, Optional ByVal bSelect As Boolean = True) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>ParentNode</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ChildNode</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>bSelect</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pPtInRectRegion</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine>## Returns a set of bit flags indicating whether the specified point resides in</CommentLine>
<CommentLine>   the specified size region with the perimeter of the specified rect. cxyRegion</CommentLine>
<CommentLine>   defines the rectangular region within rc, and must be a positive value</CommentLine>
</CommentLines>
<Declaration>Private Function pPtInRectRegion(rc As RECT, cxyRegion As Long, pt As POINTAPI) As RectFlags</Declaration>
<Parameters>
<Parameter>
<Name>rc</Name>
<Type>RECT</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>cxyRegion</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>pt</Name>
<Type>POINTAPI</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pScale</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine> ## Converts from Pixels to nominated scale mode</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Sub pScale(ByVal InX As Single, ByVal InY As Single, ByRef OutX As Single, ByRef OutY As Single, Optional ByVal InScaleMode As VBRUN.ScaleModeConstants = vbPixels, Optional ByVal OutScaleMode As VBRUN.ScaleModeConstants = vbTwips)</Declaration>
<Parameters>
<Parameter>
<Name>InX</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>InY</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>OutX</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>OutY</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>InScaleMode</Name>
<Type>VBRUN.ScaleModeConstants</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbPixels</DefaultValue>
</Parameter>
<Parameter>
<Name>OutScaleMode</Name>
<Type>VBRUN.ScaleModeConstants</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTwips</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pSubNodesExpandState</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.02.00</CommentLine>
</CommentLines>
<Declaration>Private Sub pSubNodesExpandState(ByRef Node As MSComctlLib.Node, Optional ByVal ExpandAll As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ExpandAll</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pTranslateColor</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.03.00</CommentLine>
</CommentLines>
<Declaration>Private Function pTranslateColor(lColor As Long, Optional ByVal hPal As Long = 0) As Long</Declaration>
<Parameters>
<Parameter>
<Name>lColor</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>hPal</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pTreeViewMessage</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>122</CountOfLines>
<CommentLines>
<CommentLine>@@ v02.03.00</CommentLine>
</CommentLines>
<Declaration>Private Sub pTreeViewMessage(ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam As Long, ByRef RetVal As Long, ByRef UseRetVal As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>hwnd</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>wMsg</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>wParam</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>lParam</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RetVal</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>UseRetVal</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine></CommentLine>
<CommentLine> Class Name:  cTreeView</CommentLine>
<CommentLine> Author:      Graeme Grant        (a.k.a. Slider)</CommentLine>
<CommentLine> Date:        15/08/2002</CommentLine>
<CommentLine> Version:     02.03.00</CommentLine>
<CommentLine> Description: Advanced TreeView Handler</CommentLine>
<CommentLine> History:     Too big to put here - See cTreeviewHistory.Txt file</CommentLine>
<CommentLine> Compiling:   DLL : set class Instancing = 5 - MultiUse</CommentLine>
<CommentLine>              APP : set class Instancing = 1 - Private</CommentLine>
<CommentLine></CommentLine>
<CommentLine> Notes:       NODLL conditional compilation flag is used in the project&apos;s</CommentLine>
<CommentLine>              &apos;Conditional Compiling Arguments&apos; property (see</CommentLine>
<CommentLine>              tutorial?_NODLL.PRJ properties to see usage).</CommentLine>
<CommentLine></CommentLine>
<CommentLine> Original Authors: Credit where it&apos;s due:- MultiNode Selection, HitTestEx,</CommentLine>
<CommentLine>                   and NodeFindEx2 - www.aboutvb.de; TrueDragImage,</CommentLine>
<CommentLine>                   SetOverlayImage, CutIconState, Locked, &amp; Enabled - Brad</CommentLine>
<CommentLine>                   Martinez; FirstVisibleNode - www.vb2themax.com;</CommentLine>
<CommentLine>                   ScrollView - Microsoft (Articles Q177743 &amp; Q244312);</CommentLine>
<CommentLine>                   Subclassing &amp; cTile - Steve McMahon.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> Special Thanks:   Zhu JinYong  - Finding alot of bugs + his suggestions</CommentLine>
<CommentLine>                   Elim LaRoche - Suggestions on expanding NodeMove</CommentLine>
<CommentLine>                                  functionality</CommentLine>
<CommentLine>                   Michel       - Finding more bugs.</CommentLine>
<CommentLine>                   PSC users    - for rewarding my hours of effort with</CommentLine>
<CommentLine>                                  votes - without these guys, I probably</CommentLine>
<CommentLine>                                  wouldn&apos;t have pushed this project as</CommentLine>
<CommentLine>                                  far as I have!</CommentLine>
<CommentLine></CommentLine>
<CommentLine>===========================================================================</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>iMultiSelect</Name>
<FileName>iMultiSelect.cls</FileName>
<PathFileName>C:\cTreeview v020300\Source - DLL\iMultiSelect.cls</PathFileName>
<Type>ClassModule</Type>
<Description></Description>
<HelpContextID>0</HelpContextID>
<Properties>
<Property>
<Name>Name</Name>
<Value>iMultiSelect</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>2</Value>
</Property>
<Property>
<Name>Persistable</Name>
<Value>0</Value>
</Property>
<Property>
<Name>DataBindingBehavior</Name>
<Value>0</Value>
</Property>
<Property>
<Name>DataSourceBehavior</Name>
<Value>0</Value>
</Property>
<Property>
<Name>MTSTransactionMode</Name>
<Value>0</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>18</CountOfDeclarationLines>
<CountOfLines>107</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>NoClearOnSpaceClick</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get NoClearOnSpaceClick() As Boolean</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>NoClearOnSpaceClick</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let NoClearOnSpaceClick(ByVal New_NoClearOnSpaceClick As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>New_NoClearOnSpaceClick</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NoDefaultSel</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get NoDefaultSel() As Boolean</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>NoDefaultSel</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let NoDefaultSel(ByVal New_NoDefaultSel As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>New_NoDefaultSel</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>SelBackColor</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get SelBackColor() As OLE_COLOR</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>SelBackColor</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let SelBackColor(ByVal New_SelBackColor As OLE_COLOR)</Declaration>
<Parameters>
<Parameter>
<Name>New_SelBackColor</Name>
<Type>OLE_COLOR</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>SelBold</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get SelBold() As Boolean</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>SelBold</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let SelBold(ByVal New_SelBold As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>New_SelBold</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>SelForeColor</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get SelForeColor() As OLE_COLOR</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>SelForeColor</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let SelForeColor(ByVal New_SelForeColor As OLE_COLOR)</Declaration>
<Parameters>
<Parameter>
<Name>New_SelForeColor</Name>
<Type>OLE_COLOR</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>FocusNode</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get FocusNode() As MSComctlLib.Node</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>FocusNode</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let FocusNode(ByVal New_Focus As MSComctlLib.Node)</Declaration>
<Parameters>
<Parameter>
<Name>New_Focus</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>SelectedNode</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
<CommentLine>Public Property Get SelInvertColors() As Boolean</CommentLine>
<CommentLine></CommentLine>
<CommentLine>End Property</CommentLine>
<CommentLine></CommentLine>
<CommentLine>Public Property Let SelInvertColors(ByVal New_SelInvert As Boolean)</CommentLine>
<CommentLine>&apos;</CommentLine>
<CommentLine>&apos;To be implemented: Invert colour code:-</CommentLine>
<CommentLine>&apos;   NewCol = OldCol XOr &amp;HFFFFFF</CommentLine>
<CommentLine>&apos;</CommentLine>
<CommentLine>End Property</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Property Get SelectedNode(ByVal Index As Long) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>Index</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>ClearSelection</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub ClearSelection(Optional ByRef Node As MSComctlLib.Node)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>SelectAllNodes</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub SelectAllNodes(Optional ByRef Node As MSComctlLib.Node)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>SelectNode</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub SelectNode(ByRef Node As MSComctlLib.Node, ByVal Selected As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Selected</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>ToggleNode</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub ToggleNode(Optional ByRef Node As MSComctlLib.Node, Optional ByVal Children As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Children</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>ToggleSelection</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub ToggleSelection(Optional ByRef Node As MSComctlLib.Node)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NewEnum</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function NewEnum() As IUnknown</Declaration>
<Parameters>
</Parameters>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine></CommentLine>
<CommentLine> Interface:   iMultiSelect</CommentLine>
<CommentLine> Author:      Graeme Grant        (a.k.a. Slider)</CommentLine>
<CommentLine> Date:        03/02/2001</CommentLine>
<CommentLine> Version:     01.00.00</CommentLine>
<CommentLine> Description: Interface definition for multi-node selection feature</CommentLine>
<CommentLine> Notes:       Due to the unique nature of multi-node selection, the</CommentLine>
<CommentLine>              interface clearly defined the properties and methods used</CommentLine>
<CommentLine>              for this feature. From a coding perspective, it was a</CommentLine>
<CommentLine>              suprise to discover how to expose an enumeration interface</CommentLine>
<CommentLine>              using an interface class.</CommentLine>
<CommentLine> Compiling:   DLL : set class Instancing = 2 - PublicNotCreatable</CommentLine>
<CommentLine>              APP : set class Instancing = 1 - Private</CommentLine>
<CommentLine></CommentLine>
<CommentLine>===========================================================================</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>cTags</Name>
<FileName>cTags.cls</FileName>
<PathFileName>C:\cTreeview v020300\Source - Extras\cTags.cls</PathFileName>
<Type>ClassModule</Type>
<Description></Description>
<HelpContextID>0</HelpContextID>
<Properties>
<Property>
<Name>Name</Name>
<Value>cTags</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
<Property>
<Name>DataBindingBehavior</Name>
<Value>0</Value>
</Property>
<Property>
<Name>DataSourceBehavior</Name>
<Value>0</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>20</CountOfDeclarationLines>
<CountOfLines>73</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>Add</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub Add(ByVal lPtr As Long, ParamArray Elements() As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>lPtr</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Elements()</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>True</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>Remove</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub Remove(ByVal lPtr As Long)</Declaration>
<Parameters>
<Parameter>
<Name>lPtr</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>Exist</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function Exist(ByVal lPtr As Long) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>lPtr</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>Count</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get Count() As Long</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>Element</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get Element(ByVal lPtr As Long, ByVal ElementID As Long) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>lPtr</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ElementID</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>Element</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let Element(ByVal lPtr As Long, ByVal ElementID As Long, NewData As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>lPtr</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ElementID</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>NewData</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>Element</Name>
<Scope>Public</Scope>
<Type>PropertySet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Set Element(ByVal lPtr As Long, ByVal ElementID As Long, NewObj As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>lPtr</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ElementID</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>NewObj</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NewEnum</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function NewEnum() As IUnknown</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>Class_Initialize</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Class_Initialize()</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>Class_Terminate</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Class_Terminate()</Declaration>
<Parameters>
</Parameters>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine></CommentLine>
<CommentLine> Class Name:  cTags</CommentLine>
<CommentLine> Author:      Graeme Grant        (a.k.a. Slider)</CommentLine>
<CommentLine> Date:        03/02/2001</CommentLine>
<CommentLine> Version:     01.00.00</CommentLine>
<CommentLine> Description: Variant Collection class</CommentLine>
<CommentLine> Notes:       Collection class offered more functionality over an array of</CommentLine>
<CommentLine>              UDTs (User Defined Type variable structure) or an array of</CommentLine>
<CommentLine>              variants.</CommentLine>
<CommentLine>              -=-=-= Warning! =-=-=-</CommentLine>
<CommentLine>              This class requires &apos;Break on Unhandled Errors&apos; if run in the</CommentLine>
<CommentLine>              IDE. To set this, on the IDE menu:- Tools &gt; Options &gt; set</CommentLine>
<CommentLine>              Error Trapping = Break on Unhandled Errors option.</CommentLine>
<CommentLine></CommentLine>
<CommentLine>===========================================================================</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>XTimer</Name>
<FileName>XTIMER.CLS</FileName>
<PathFileName>C:\cTreeview v020300\Source - Extras\XTIMER.CLS</PathFileName>
<Type>ClassModule</Type>
<Description></Description>
<HelpContextID>0</HelpContextID>
<Properties>
<Property>
<Name>Name</Name>
<Value>XTimer</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
<Property>
<Name>DataBindingBehavior</Name>
<Value>0</Value>
</Property>
<Property>
<Name>DataSourceBehavior</Name>
<Value>0</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>18</CountOfDeclarationLines>
<CountOfLines>176</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
<Event>
<Name>Tick</Name>
<Declaration>Event Tick()</Declaration>
</Event>
</Events>
<Procedures>
<Procedure>
<Name>TimerID</Name>
<Scope>Friend</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine> TimerID property is required by the EndTimer procedure,</CommentLine>
<CommentLine> ----------------   in order to quickly locate the timer</CommentLine>
<CommentLine>   in the support module&apos;s array of active timers.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> There&apos;s no reason for the client to use this property,</CommentLine>
<CommentLine>   so it&apos;s declared Friend instead of Public.</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Friend Property Get TimerID() As Long</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>Enabled</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine> Enabled property turns the timer on and off.  This is</CommentLine>
<CommentLine> ----------------      done by killing the system timer,</CommentLine>
<CommentLine>   because there&apos;s no way to suspend a system timer.</CommentLine>
<CommentLine>   If they exist, they&apos;re running.</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Property Get Enabled() As Boolean</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>Enabled</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Property Let Enabled(ByVal NewValue As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>NewValue</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>Interval</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine> Interval property must do more than just set the</CommentLine>
<CommentLine> -----------------   timer interval.  If the XTimer</CommentLine>
<CommentLine>   is enabled, and the Interval is changed from zero</CommentLine>
<CommentLine>   to a non-zero value, then a system timer must be</CommentLine>
<CommentLine>   started.  Likewise, if the Interval is changed</CommentLine>
<CommentLine>   to zero, the system timer must be stopped.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> The Property Let procedure also ends one system timer</CommentLine>
<CommentLine>   and starts another whenever the interval changes.</CommentLine>
<CommentLine>   This is because there&apos;s no way to change the</CommentLine>
<CommentLine>   interval of a system timer.</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Property Get Interval() As Long</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>Interval</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Property Let Interval(ByVal NewInterval As Long)</Declaration>
<Parameters>
<Parameter>
<Name>NewInterval</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>RaiseTick</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine> RaiseTick method is called by the support module when</CommentLine>
<CommentLine> ----------------   the system timer event occurs for</CommentLine>
<CommentLine>   this XTimer object&apos;s system timer.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> Implementation detail:  You might expect to declare</CommentLine>
<CommentLine>   this method Friend instead of Public, as there&apos;s</CommentLine>
<CommentLine>   no need for the client to call RaiseTick.  However,</CommentLine>
<CommentLine>   it&apos;s critical that RaiseTick be declared Public,</CommentLine>
<CommentLine>   because the XTimer might be released while the</CommentLine>
<CommentLine>   Tick event is still being handled.  An object will</CommentLine>
<CommentLine>   not terminate while one of its Public methods is</CommentLine>
<CommentLine>   on the stack, but it CAN terminate while one of its</CommentLine>
<CommentLine>   Friend methods is on the stack.  If the object</CommentLine>
<CommentLine>   terminates before the Friend method returns (which</CommentLine>
<CommentLine>   could happen if the client executes a lot of code</CommentLine>
<CommentLine>   in the XTimer&apos;s Tick event), a GPF will result.</CommentLine>
<CommentLine>   (Note that this is a highly unusual scenario that</CommentLine>
<CommentLine>   depends on an external event; it does not occur in</CommentLine>
<CommentLine>   ordinary use of Friend functions.)</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub RaiseTick()</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>Class_Terminate</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>39</CountOfLines>
<CommentLines>
<CommentLine> When the client releases its last reference to</CommentLine>
<CommentLine>   an XTimer object, it goes away -- but only</CommentLine>
<CommentLine>   if the XTimer&apos;s Enabled property is False,</CommentLine>
<CommentLine>   or its Interval property is True!</CommentLine>
<CommentLine></CommentLine>
<CommentLine> This is because while the XTimer&apos;s system</CommentLine>
<CommentLine>   timer is running, the XTimerSupport module</CommentLine>
<CommentLine>   has to have a reference to the XTimer in</CommentLine>
<CommentLine>   order to raise its Tick event.  Thus,</CommentLine>
<CommentLine>   failure of the client to disable XTimer</CommentLine>
<CommentLine>   objects before releasing them will LEAK</CommentLine>
<CommentLine>   system timers!</CommentLine>
<CommentLine></CommentLine>
<CommentLine> These leaked system timers will not be</CommentLine>
<CommentLine>   recovered until the XTimers component shuts</CommentLine>
<CommentLine>   down -- that is, when the client using</CommentLine>
<CommentLine>   the DLL shuts down.  The DLL will NOT</CommentLine>
<CommentLine>   unload when all XTimer objects are released,</CommentLine>
<CommentLine>   because references to public objects (in</CommentLine>
<CommentLine>   this case, those held by XTimerSupport)</CommentLine>
<CommentLine>   will prevent a DLL from unloading.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> So why bother to clean up the system timer</CommentLine>
<CommentLine>   in the Terminate event?  Because when the</CommentLine>
<CommentLine>   DLL is getting shut down, all references</CommentLine>
<CommentLine>   to the XTimer object will be cleaned up</CommentLine>
<CommentLine>   -- and the XTimer will get its Terminate</CommentLine>
<CommentLine>   event.  The system timer should be</CommentLine>
<CommentLine>   destroyed at this point.</CommentLine>
</CommentLines>
<Declaration>Private Sub Class_Terminate()</Declaration>
<Parameters>
</Parameters>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>XTimerSupport</Name>
<FileName>XTIMERS.BAS</FileName>
<PathFileName>C:\cTreeview v020300\Source - Extras\XTIMERS.BAS</PathFileName>
<Type>StdModule</Type>
<Description></Description>
<HelpContextID>0</HelpContextID>
<Properties>
<Property>
<Name>Name</Name>
<Value>XTimerSupport</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>53</CountOfDeclarationLines>
<CountOfLines>214</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>BeginTimer</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>46</CountOfLines>
<CommentLines>
<CommentLine> BeginTimer function is called by an XTimer object when</CommentLine>
<CommentLine> -------------------   the XTimer&apos;s Interval property is</CommentLine>
<CommentLine>   set to a new non-zero value.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> The function makes the API calls required to set up a</CommentLine>
<CommentLine>   timer.  If a timer is successfully created, the</CommentLine>
<CommentLine>   function puts a reference to the XTimer object into</CommentLine>
<CommentLine>   the array maxti.  This reference will be used to call</CommentLine>
<CommentLine>   the method that raises the XTimer&apos;s Tick event.</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function BeginTimer(ByVal xt As XTimer, ByVal Interval As Long)</Declaration>
<Parameters>
<Parameter>
<Name>xt</Name>
<Type>XTimer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Interval</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>TimerProc</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>61</CountOfLines>
<CommentLines>
<CommentLine> TimerProc is the timer procedure which the system will</CommentLine>
<CommentLine> ---------   call whenever one of your timers goes off.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> IMPORTANT -- Because this procedure must be in a</CommentLine>
<CommentLine>   standard module, all of your timer objects must share</CommentLine>
<CommentLine>   it.  This means the procedure must identify which timer</CommentLine>
<CommentLine>   has gone off.  This is done by searching the array</CommentLine>
<CommentLine>   maxti for the ID of the timer (idEvent).</CommentLine>
<CommentLine></CommentLine>
<CommentLine> If this Sub declaration is wrong, PROGRAM FAULTS will</CommentLine>
<CommentLine>   occur!  This is one of the dangers of using APIs</CommentLine>
<CommentLine>   that require call-back functions.</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub TimerProc(ByVal hwnd As Long, ByVal uMsg As Long, ByVal idEvent As Long, ByVal lngSysTime As Long)</Declaration>
<Parameters>
<Parameter>
<Name>hwnd</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>uMsg</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>idEvent</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>lngSysTime</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>EndTimer</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>39</CountOfLines>
<CommentLines>
<CommentLine> EndTimer procedure is called by the XTimer whenever</CommentLine>
<CommentLine> ------------------   the Enabled property is set to</CommentLine>
<CommentLine>   False, and whenever a new timer interval is required.</CommentLine>
<CommentLine>   There is no way to reset a system timer, so the only</CommentLine>
<CommentLine>   way to change the interval is to kill the existing</CommentLine>
<CommentLine>   timer and then call BeginTimer to start a new one.</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub EndTimer(ByVal xt As XTimer)</Declaration>
<Parameters>
<Parameter>
<Name>xt</Name>
<Type>XTimer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>Scrub</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
<CommentLine> Scrub procedure is a safety valve for debugging purposes</CommentLine>
<CommentLine> ---------------   only:  If you have to End this project</CommentLine>
<CommentLine>   while there are XTimer objects active, call Scrub from</CommentLine>
<CommentLine>   the Immediate pane.  This will call KillTimer for all</CommentLine>
<CommentLine>   of the system timers, so that the development</CommentLine>
<CommentLine>   environment can safely return to design mode.</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub Scrub()</Declaration>
<Parameters>
</Parameters>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name></Name>
<FileName>cTreeview HelpFiles.htm</FileName>
<PathFileName>C:\cTreeview v020300\cTreeview HelpFiles.htm</PathFileName>
<Type>RelatedDocument</Type>
</File>
<File>
<Name>GSubclass</Name>
<FileName>subclass.cls</FileName>
<PathFileName>C:\cTreeview v020300\Source - DLL\subclass.cls</PathFileName>
<Type>ClassModule</Type>
<Description></Description>
<HelpContextID>0</HelpContextID>
<Properties>
<Property>
<Name>Name</Name>
<Value>GSubclass</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
<Property>
<Name>DataBindingBehavior</Name>
<Value>0</Value>
</Property>
<Property>
<Name>DataSourceBehavior</Name>
<Value>0</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>22</CountOfDeclarationLines>
<CountOfLines>43</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>AttachMessage</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub AttachMessage(iwp As cTreeView, ByVal hwnd As Long, ByVal iMsg As Long)</Declaration>
<Parameters>
<Parameter>
<Name>iwp</Name>
<Type>cTreeView</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>hwnd</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>iMsg</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>DetachMessage</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub DetachMessage(iwp As cTreeView, ByVal hwnd As Long, ByVal iMsg As Long)</Declaration>
<Parameters>
<Parameter>
<Name>iwp</Name>
<Type>cTreeView</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>hwnd</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>iMsg</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>CurrentMessage</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get CurrentMessage() As Long</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>CallOldWindowProc</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function CallOldWindowProc(ByVal hwnd As Long, ByVal iMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long</Declaration>
<Parameters>
<Parameter>
<Name>hwnd</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>iMsg</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>wParam</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>lParam</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine></CommentLine>
<CommentLine> Class Name:  GSubclass</CommentLine>
<CommentLine> Author:      Steve McMahon (Original) http://www.vbaccelerator.com</CommentLine>
<CommentLine>              Graeme Grant (a.k.a. Slider)</CommentLine>
<CommentLine> Date:        01/07/2002 (Adapted)</CommentLine>
<CommentLine> Version:     01.01.00</CommentLine>
<CommentLine> Description: Subclassing wrapper</CommentLine>
<CommentLine> Notes:       Adapted to work with the cTreeView wrapper DLL/Classes</CommentLine>
<CommentLine>              -=-=-= Warning! =-=-=-</CommentLine>
<CommentLine>              Subclassing can crash the IDE if stopped at the wrong point</CommentLine>
<CommentLine>              in execution.</CommentLine>
<CommentLine></CommentLine>
<CommentLine>===========================================================================</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>MSubclass</Name>
<FileName>subclass.bas</FileName>
<PathFileName>C:\cTreeview v020300\Source - DLL\subclass.bas</PathFileName>
<Type>StdModule</Type>
<Description></Description>
<HelpContextID>0</HelpContextID>
<Properties>
<Property>
<Name>Name</Name>
<Value>MSubclass</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>42</CountOfDeclarationLines>
<CountOfLines>331</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>CurrentMessage</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get CurrentMessage() As Long</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>ErrRaise</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub ErrRaise(e As Long)</Declaration>
<Parameters>
<Parameter>
<Name>e</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>AttachMessage</Name>
<Scope></Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>70</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Sub AttachMessage(iwp As cTreeView, ByVal hwnd As Long, ByVal iMsg As Long)</Declaration>
<Parameters>
<Parameter>
<Name>iwp</Name>
<Type>cTreeView</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>hwnd</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>iMsg</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>DetachMessage</Name>
<Scope></Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>71</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Sub DetachMessage(iwp As cTreeView, ByVal hwnd As Long, ByVal iMsg As Long)</Declaration>
<Parameters>
<Parameter>
<Name>iwp</Name>
<Type>cTreeView</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>hwnd</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>iMsg</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>WindowProc</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>101</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function WindowProc(ByVal hwnd As Long, ByVal iMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long</Declaration>
<Parameters>
<Parameter>
<Name>hwnd</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>iMsg</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>wParam</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>lParam</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>CallOldWindowProc</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function CallOldWindowProc(ByVal hwnd As Long, ByVal iMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long</Declaration>
<Parameters>
<Parameter>
<Name>hwnd</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>iMsg</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>wParam</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>lParam</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>IsWindowLocal</Name>
<Scope></Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>## Cheat! Cut and paste from MWinTool rather than reusing</CommentLine>
<CommentLine>   file because reusing file would cause many unneeded dependencies</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Function IsWindowLocal(ByVal hwnd As Long) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>hwnd</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine></CommentLine>
<CommentLine> Module Name: MSubclass</CommentLine>
<CommentLine> Author:      Steve McMahon (Original) http://www.vbaccelerator.com</CommentLine>
<CommentLine>              Graeme Grant (a.k.a. Slider)</CommentLine>
<CommentLine> Date:        01/07/2002 (Adapted)</CommentLine>
<CommentLine> Version:     01.01.00</CommentLine>
<CommentLine> Description: Subclassing functionality</CommentLine>
<CommentLine> Notes:       Adapted to work with the cTreeView wrapper DLL/Classes</CommentLine>
<CommentLine>              -=-=-= Warning! =-=-=-</CommentLine>
<CommentLine>              Subclassing can crash the IDE if stopped at the wrong point</CommentLine>
<CommentLine>              in execution.</CommentLine>
<CommentLine></CommentLine>
<CommentLine>===========================================================================</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>iDisable</Name>
<FileName>iDisable.cls</FileName>
<PathFileName>C:\cTreeview v020300\Source - DLL\iDisable.cls</PathFileName>
<Type>ClassModule</Type>
<Description></Description>
<HelpContextID>0</HelpContextID>
<Properties>
<Property>
<Name>Name</Name>
<Value>iDisable</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>2</Value>
</Property>
<Property>
<Name>Persistable</Name>
<Value>0</Value>
</Property>
<Property>
<Name>DataBindingBehavior</Name>
<Value>0</Value>
</Property>
<Property>
<Name>DataSourceBehavior</Name>
<Value>0</Value>
</Property>
<Property>
<Name>MTSTransactionMode</Name>
<Value>0</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>24</CountOfDeclarationLines>
<CountOfLines>99</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>AllowSelect</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get AllowSelect() As Boolean</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>AllowSelect</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let AllowSelect(ByVal New_State As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>New_State</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>BackColor</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get BackColor() As OLE_COLOR</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>BackColor</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let BackColor(ByVal New_BackColor As OLE_COLOR)</Declaration>
<Parameters>
<Parameter>
<Name>New_BackColor</Name>
<Type>OLE_COLOR</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>Bold</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get Bold() As Boolean</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>Bold</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let Bold(ByVal New_Bold As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>New_Bold</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>DisabledNode</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get DisabledNode(ByVal Index As Long) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>Index</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>FocusNode</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get FocusNode() As MSComctlLib.Node</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>ForeColor</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get ForeColor() As OLE_COLOR</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>ForeColor</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let ForeColor(ByVal New_SelForeColor As OLE_COLOR)</Declaration>
<Parameters>
<Parameter>
<Name>New_SelForeColor</Name>
<Type>OLE_COLOR</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>SelectMode</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get SelectMode() As eDisableAdjustSelectMode</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>SelectMode</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let SelectMode(ByVal New_Mode As eDisableAdjustSelectMode)</Declaration>
<Parameters>
<Parameter>
<Name>New_Mode</Name>
<Type>eDisableAdjustSelectMode</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>DisableAllNodes</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub DisableAllNodes(Optional ByRef Node As MSComctlLib.Node, Optional ByVal State As Boolean = True)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>State</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>DisableNode</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub DisableNode(ByRef Node As MSComctlLib.Node, Optional ByVal State As Boolean = True)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>State</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>DisableMultiSelect</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub DisableMultiSelect(Optional ByVal State As Boolean = True)</Declaration>
<Parameters>
<Parameter>
<Name>State</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>ToggleDisabled</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub ToggleDisabled(Optional ByRef Node As MSComctlLib.Node)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>ToggleNodeState</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub ToggleNodeState(Optional ByRef Node As MSComctlLib.Node, Optional ByVal Children As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Node</Name>
<Type>MSComctlLib.Node</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Children</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>NewEnum</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function NewEnum() As IUnknown</Declaration>
<Parameters>
</Parameters>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine></CommentLine>
<CommentLine> Interface:   iDisable</CommentLine>
<CommentLine> Author:      Graeme Grant        (a.k.a. Slider)</CommentLine>
<CommentLine> Date:        10/07/2002</CommentLine>
<CommentLine> Version:     01.01.00     (v02.03.00 cTreeView)</CommentLine>
<CommentLine> Description: Interface definition for Disable Node feature</CommentLine>
<CommentLine> Edit History: 01.00.00 23/03/2002 Initial Release</CommentLine>
<CommentLine>               01.01.00 10/07/2002 Added support for Multi-Select Nodes</CommentLine>
<CommentLine> Notes:       Due to the unique nature of Disable Node, the</CommentLine>
<CommentLine>              interface clearly defined the properties and methods used</CommentLine>
<CommentLine>              for this feature.</CommentLine>
<CommentLine> Compiling:   DLL : set class Instancing = 2 - PublicNotCreatable</CommentLine>
<CommentLine>              APP : set class Instancing = 1 - Private</CommentLine>
<CommentLine></CommentLine>
<CommentLine>===========================================================================</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>mLikeCompareBinary</Name>
<FileName>mLikeCompareBinary.bas</FileName>
<PathFileName>C:\cTreeview v020300\Source - DLL\mLikeCompareBinary.bas</PathFileName>
<Type>StdModule</Type>
<Description></Description>
<HelpContextID>0</HelpContextID>
<Properties>
<Property>
<Name>Name</Name>
<Value>mLikeCompareBinary</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>LikeCompBinary</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function LikeCompBinary(Str As String, Match As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Str</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Match</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>mLikeCompareText</Name>
<FileName>mLikeCompareText.bas</FileName>
<PathFileName>C:\cTreeview v020300\Source - DLL\mLikeCompareText.bas</PathFileName>
<Type>StdModule</Type>
<Description></Description>
<HelpContextID>0</HelpContextID>
<Properties>
<Property>
<Name>Name</Name>
<Value>mLikeCompareText</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>LikeCompText</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function LikeCompText(Str As String, Match As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Str</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Match</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name></Name>
<FileName>Code.xml</FileName>
<PathFileName>C:\cTreeview v020300\Resources\Help\Code.xml</PathFileName>
<Type>RelatedDocument</Type>
</File>
<File>
<Name>iCheck</Name>
<FileName>iCheck.cls</FileName>
<PathFileName>C:\cTreeview v020300\Source - DLL\iCheck.cls</PathFileName>
<Type>ClassModule</Type>
<Description></Description>
<HelpContextID>0</HelpContextID>
<Properties>
<Property>
<Name>Name</Name>
<Value>iCheck</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>2</Value>
</Property>
<Property>
<Name>Persistable</Name>
<Value>0</Value>
</Property>
<Property>
<Name>DataBindingBehavior</Name>
<Value>0</Value>
</Property>
<Property>
<Name>DataSourceBehavior</Name>
<Value>0</Value>
</Property>
<Property>
<Name>MTSTransactionMode</Name>
<Value>0</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>17</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
</Procedures>
<CommentLines>
<CommentLine>===========================================================================</CommentLine>
<CommentLine></CommentLine>
<CommentLine> Interface:   iCheck</CommentLine>
<CommentLine> Author:      Graeme Grant        (a.k.a. Slider)</CommentLine>
<CommentLine> Date:        ??/??/2002</CommentLine>
<CommentLine> Version:     01.00.00</CommentLine>
<CommentLine> Description: Interface definition for Check Node feature</CommentLine>
<CommentLine> Notes:       Due to the unique nature of Check Node, the</CommentLine>
<CommentLine>              interface clearly defined the properties and methods used</CommentLine>
<CommentLine>              for this feature.</CommentLine>
<CommentLine> Compiling:   DLL : set class Instancing = 2 - PublicNotCreatable</CommentLine>
<CommentLine>              APP : set class Instancing = 1 - Private</CommentLine>
<CommentLine></CommentLine>
<CommentLine>===========================================================================</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>cTile</Name>
<FileName>cTile.cls</FileName>
<PathFileName>C:\cTreeview v020300\Source - Extras\cTile.cls</PathFileName>
<Type>ClassModule</Type>
<Description></Description>
<HelpContextID>0</HelpContextID>
<Properties>
<Property>
<Name>Name</Name>
<Value>cTile</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
<Property>
<Name>DataBindingBehavior</Name>
<Value>0</Value>
</Property>
<Property>
<Name>DataSourceBehavior</Name>
<Value>0</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>47</CountOfDeclarationLines>
<CountOfLines>258</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>PicturehDC</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get PicturehDC() As Long</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>XOriginOffset</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>3</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get XOriginOffset() As Long</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>XOriginOffset</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>3</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let XOriginOffset(ByVal lPixels As Long)</Declaration>
<Parameters>
<Parameter>
<Name>lPixels</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>YOriginOffset</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>3</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get YOriginOffset() As Long</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>YOriginOffset</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>3</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let YOriginOffset(ByVal lPiYels As Long)</Declaration>
<Parameters>
<Parameter>
<Name>lPiYels</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>BitmapWidth</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>3</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get BitmapWidth() As Long</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>BitmapHeight</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>3</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get BitmapHeight() As Long</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>pErr</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>3</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub pErr(lNumber As Long, smsg As String)</Declaration>
<Parameters>
<Parameter>
<Name>lNumber</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>smsg</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>Filename</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine> Load a picture from a file:</CommentLine>
</CommentLines>
<Declaration>Public Property Let Filename( ByVal sFileName As String )</Declaration>
<Parameters>
<Parameter>
<Name>sFileName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>Filename</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>3</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get Filename() As String</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>Picture</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>3</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get Picture() As StdPicture</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>Picture</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine> Load a picture from a StdPicture object:</CommentLine>
</CommentLines>
<Declaration>Public Property Let Picture(oPic As StdPicture)</Declaration>
<Parameters>
<Parameter>
<Name>oPic</Name>
<Type>StdPicture</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pbEnsurePicture</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function pbEnsurePicture() As Boolean</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>pbLoadPictureFromFile</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function pbLoadPictureFromFile(sFile As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pbLoadPicture</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function pbLoadPicture(sFile As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>pbGetBitmapIntoDC</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>40</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function pbGetBitmapIntoDC() As Boolean</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>Palette</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>3</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get Palette() As StdPicture</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>pClearUp</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine> Clear reference to the filename:</CommentLine>
</CommentLines>
<Declaration>Private Sub pClearUp()</Declaration>
<Parameters>
</Parameters>
</Procedure>
<Procedure>
<Name>TileArea</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>7</CountOfDeclarationLines>
<CountOfLines>54</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub TileArea( ByRef hdc As Long, ByVal x As Long, ByVal y As Long, ByVal Width As Long, ByVal Height As Long )</Declaration>
<Parameters>
<Parameter>
<Name>hdc</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>x</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>y</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Width</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Height</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
</Procedure>
<Procedure>
<Name>Class_Terminate</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
<CommentLine> Ensure all GDI objects are freed:</CommentLine>
</CommentLines>
<Declaration>Private Sub Class_Terminate()</Declaration>
<Parameters>
</Parameters>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name></Name>
<FileName>vbTree.RES</FileName>
<PathFileName>C:\cTreeview v020300\Source - DLL\vbTree.RES</PathFileName>
<Type>ResFile</Type>
</File>
</Files>
</Project>
